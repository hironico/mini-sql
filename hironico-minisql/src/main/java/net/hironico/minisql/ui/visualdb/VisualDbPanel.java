/*
 * VisualDbPanel.java
 *
 * Created on Dec 24, 2009, 12:05:57 PM
 */
package net.hironico.minisql.ui.visualdb;

import java.awt.BorderLayout;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Logger;
import javax.swing.*;

import net.hironico.minisql.DbConfig;
import net.hironico.minisql.DbConfigFile;
import net.hironico.minisql.model.SQLTable;
import net.hironico.minisql.ui.MainWindow;
import net.hironico.minisql.ui.tableselector.ShowTableSelectorAction;

import org.jdesktop.jxlayer.JXLayer;

/**
 * Le VisualDbPanel est l'outil de modélisation graphique de la base de données.
 * Pour la version 2.1.0 c'est un outil en lecture seule mais il sera amené à évoluer
 * pour devenir un composant central de creation et de modification des tables.
 * Ce panel utilise la Visual Library de Netbeans pour créer une scene de modélisation
 * avec tout le confort moderne. D'autre part ce panel dispose d'une petite palette pour
 * la navigation dans les grands modèles (zoom, bird view et satellite view) ainsi que
 * la possibilité de filtrer les tables affichées ainsi que le niveau de détail.
 * @author hironico
 * @since 2.1.0
 */
public class VisualDbPanel extends javax.swing.JPanel implements DbConfigFile.DbConfigFileListener {

    protected static final Logger logger = Logger.getLogger(VisualDbPanel.class.getName());
    private final DBGraphScene graphScene = new DBGraphScene();

    private javax.swing.JComboBox<String> cmbConnectionName;
    private JXLayer<JComponent> sceneLayer;
    private SatelliteUI satelliteUI;

    public VisualDbPanel() {
        initComponents();

        refreshConnectionNames();

        DbConfigFile.addListener(this);
    }

    /**
     * Permet de mettre à jour la liste des connexions disponibles dans la combo
     * SANS déclencher le itemStateChanged, sauf si le pool actuellement sélectionné
     * a été déconnecté.
     * @since 2.1.0
     */
    public void refreshConnectionNames() {
        Collection<String> names = DbConfigFile.getConfigNames();

        names.forEach(name -> {
            if (!comboNamesContains(name)) {
                cmbConnectionName.addItem(name);
            }
        });

        for (int cpt = 0; cpt < cmbConnectionName.getItemCount(); cpt++) {
            String myName = cmbConnectionName.getModel().getElementAt(cpt);
            if (!names.contains(myName)) {
                cmbConnectionName.removeItem(myName);
            }
        }
    }

    protected boolean comboNamesContains(String name) {
        for (int cpt = 0; cpt < cmbConnectionName.getItemCount(); cpt++) {
            String myName = cmbConnectionName.getModel().getElementAt(cpt);
            if (myName.equals(name)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void configAdded(DbConfig cfg) {
        refreshConnectionNames();
    }

    @Override
    public void configRemoved(DbConfig cfg) {
        refreshConnectionNames();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        JScrollPane scrollScene = new JScrollPane();
        JToolBar mainToolBar = new JToolBar();
        JButton btnSelectTables = new JButton();
        cmbConnectionName = new JComboBox<>();

        scrollScene.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        setLayout(new java.awt.BorderLayout());

        mainToolBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mainToolBar.setFloatable(false);
        mainToolBar.setRollover(true);

        btnSelectTables.setText("Select tables");
        btnSelectTables.setFocusable(false);
        btnSelectTables.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSelectTables.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSelectTables.addActionListener(this::btnSelectTablesActionPerformed);
        mainToolBar.add(btnSelectTables);

        cmbConnectionName.setMinimumSize(new java.awt.Dimension(100, 20));
        cmbConnectionName.setPreferredSize(new java.awt.Dimension(100, 22));
        mainToolBar.add(cmbConnectionName);

        add(mainToolBar, java.awt.BorderLayout.NORTH);

        scrollScene.setViewportView(graphScene.createView());

        satelliteUI = new SatelliteUI(graphScene);
        satelliteUI.setSatellitevisible(true);
        sceneLayer = new JXLayer<>(scrollScene, satelliteUI);
        this.add(sceneLayer, BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectTablesActionPerformed
        String connectionName = (String) cmbConnectionName.getSelectedItem();
        if ((connectionName == null) || "".equals(connectionName.trim())) {
            JOptionPane.showMessageDialog(VisualDbPanel.this,
                    "Please connect first!",
                    "Hey!",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        ShowTableSelectorAction selectionAction = new ShowTableSelectorAction(this, connectionName);
        selectionAction.setTitle("Select the tables to display");
        selectionAction.setSubTitle("Use the list below to select the table to display in the visual database tool. Right clic the table for selection tools.");
        selectionAction.setSelectedTablesList(graphScene.getDisplayedTableList());
        selectionAction.actionPerformed(null);

        // verif si l'utilisateur a cliqué sur ok ou cancel
        if (selectionAction.getUserClickButton() != JOptionPane.OK_OPTION) {
            return;
        }

        DbConfig dbConfig = DbConfigFile.getConfig(connectionName);
        final List<SQLTable> tables = selectionAction.getSelectedTablesList();

        // recup des colonnes des tables en asynchrone
        SQLTableLoaderThread loaderThread = new SQLTableLoaderThread(tables, dbConfig);
        Future<List<SQLTable>> fut = MainWindow.executorService.submit(loaderThread);

        try {
            graphScene.cleanUpScene();
            graphScene.createScene(fut.get());
            graphScene.revalidate();
            graphScene.validate();
        } catch (InterruptedException | ExecutionException ie) {
            ie.printStackTrace();
        }
    }

    public DBGraphScene getGraphScene() {
        return this.graphScene;
    }

    @Override
    public void repaint() {
        super.repaint();
        if (this.sceneLayer != null) this.sceneLayer.repaint();
    }

    public void showNavigation() {
        satelliteUI.setSatellitevisible(true);
    }
}
